name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: 🔍 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc poppler-utils
        
    - name: 💾 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: 🔧 Verify dependencies
      run: |
        python --version
        pandoc --version
        pdftohtml -v

    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: 🔗 Run integration tests
      run: |
        pytest tests/integration/ -v

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📋 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: 🖤 Check code formatting with Black
      run: |
        black --check --diff .

    - name: 📏 Check code style with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 📤 Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: 🏷️ Type checking with mypy
      run: |
        mypy . --ignore-missing-imports || true

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📋 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: 🛡️ Check for vulnerabilities with Safety
      run: |
        safety check --json || true

    - name: 🔍 Security linting with Bandit
      run: |
        bandit -r . -f json || true

  compatibility:
    name: 🌐 OS Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc poppler-utils

    - name: 📦 Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pandoc poppler

    - name: 📦 Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # 在Windows上跳过pandoc安装，因为需要手动设置
        echo "Windows compatibility test - manual setup required"

    - name: 📋 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run basic tests
      run: |
        python -c "import sys; print(f'Python {sys.version} on {sys.platform}')"
        python 01_prepare_env.py --help || echo "Script help test"

  documentation:
    name: 📚 Documentation
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Check README exists
      run: |
        test -f README.md

    - name: ✅ Check requirements.txt format
      run: |
        python -m pip install --upgrade pip
        pip install --dry-run -r requirements.txt

    - name: ✅ Validate shell script syntax
      run: |
        bash -n translatebook.sh

    - name: ✅ Check file permissions
      run: |
        test -x translatebook.sh

  release:
    name: 🚀 Release Check
    runs-on: ubuntu-latest
    needs: [test, lint, security, compatibility]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Check for version tags
      run: |
        echo "Checking if this is a release..."
        if git describe --exact-match --tags HEAD 2>/dev/null; then
          echo "This is a tagged release"
          echo "RELEASE_TAG=$(git describe --exact-match --tags HEAD)" >> $GITHUB_ENV
        else
          echo "This is not a tagged release"
        fi

    - name: 📦 Create release artifact
      if: env.RELEASE_TAG
      run: |
        mkdir -p release
        cp -r *.py *.sh *.html *.txt *.md tests/ .github/ release/
        tar -czf trans-books-${{ env.RELEASE_TAG }}.tar.gz release/

    - name: 📤 Upload release artifact
      if: env.RELEASE_TAG
      uses: actions/upload-artifact@v3
      with:
        name: trans-books-release
        path: trans-books-*.tar.gz

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, lint, security, compatibility]
    if: always()

    steps:
    - name: 🎉 Success notification
      if: needs.test.result == 'success' && needs.lint.result == 'success'
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: ❌ Failure notification
      if: needs.test.result == 'failure' || needs.lint.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1